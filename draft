def smooth_sundays(row):
    if row['Date'].day_name() == 'Sunday':
        previous_week_start = row['Date'] - pd.DateOffset(7)
        previous_week_monday = previous_week_start + pd.DateOffset(1)
        previous_week_saturday = previous_week_start + pd.DateOffset(6)

        # Check if previous week Monday exists, if not, use the Saturday value
        if previous_week_monday not in df['Date'].values:
            previous_week_monday = previous_week_saturday

        # Calculate the average
        c_average = (df[df['Date'] == previous_week_monday]['n_confirmed'].values[0] +
                     df[df['Date'] == previous_week_saturday]['n_confirmed'].values[0]) / 2
        r_average = (df[df['Date'] == previous_week_monday]['n_recovered'].values[0] +
                     df[df['Date'] == previous_week_saturday]['n_recovered'].values[0]) / 2
        d_average = (df[df['Date'] == previous_week_monday]['n_death'].values[0] +
                     df[df['Date'] == previous_week_saturday]['n_death'].values[0]) / 2

        return pd.Series({'n_confirmed': c_average, 'n_recovered': r_average, 'n_death': d_average})
    return row

df[['n_confirmed', 'n_recovered', 'n_death']] = df.apply(smooth_sundays, axis=1)

print(df)
####################################
# Find rows with 'Sunday' in the 'date_name' column
sunday_rows = df[df['date_name'] == 'Sunday']

for index, sunday_row in sunday_rows.iloc[1:].iterrows():
    previous_rows = df.loc[index-7:index-1]
    # Calculate the average values for columns 'x', 'y', and 'z'
    avg_c = math.ceil(previous_rows['n_confirmed'].mean())
    avg_r = math.ceil(previous_rows['n_recovered'].mean())
    avg_d = math.ceil(previous_rows['n_death'].mean())

    # Replace the values in the current row
    df.at[index, 'n_confirmed'] = avg_c
    df.at[index, 'n_recovered'] = avg_r
    df.at[index, 'n_death'] = avg_d

print(df.head(35))
############################################def smooth_sundays(df):
    # Find rows with 'Sunday' in the 'date_name' column
    sunday_rows = df[df['date_name'] == 'Sunday']

    for index, sunday_row in sunday_rows.iloc[1:].iterrows():
        previous_row = df.loc[index - 1]
        next_row = df.loc[index + 1]

        # Calculate the average values for columns 'n_confirmed', 'n_recovered', and 'n_death'
        avg_c = math.ceil((previous_row['n_confirmed'] + next_row['n_confirmed']) / 2)
        avg_r = math.ceil((previous_row['n_recovered'] + next_row['n_recovered']) / 2)
        avg_d = math.ceil((previous_row['n_death'] + next_row['n_death']) / 2)

        # Replace the values in the current row
        df.at[index, 'n_confirmed'] = avg_c
        df.at[index, 'n_recovered'] = avg_r
        df.at[index, 'n_death'] = avg_d

    return df
#############################################################
import pandas as pd
from plot_save import add_date_name_column, plot_data_dcr
import math


# Assuming you have a DataFrame 'df' with 'Date' and columns 'n_confirmed', 'n_recovered', 'n_death'
df = pd.read_csv(r'C:\Users\kida_ev\PycharmProjects\pythonProject1\MA_EVNZR\German_case_.csv')
df_ = pd.read_csv(r'C:\Users\kida_ev\PycharmProjects\pythonProject1\MA_EVNZR\German_case_.csv')
#adding name date column
df = add_date_name_column(df)
df_=add_date_name_column(df_)
def mean_of_values_2(**kwargs):
    values = kwargs.values()
    return sum(values) / 2
#print(df.columns)
# Identify rows with Sunday in the 'date_name' column
#sunday_rows = df[df['date_name'] == 'Sunday']



#df.loc[sunday_rows.index, 'value'] = None

# Apply the rolling method to calculate the mean with a window size of 3, centered on 'date_name'
df['mean_recovered'] = df['n_recovered'].rolling(window=3, center=True, min_periods=2,step=7).sum()
df['mean_confirmed'] = df['n_confirmed'].rolling(window=3, center=True, min_periods=2 ,step=7).sum()
df['mean_death'] = df['n_death'].rolling(window=3, center=True, min_periods=2,step=7).sum()
# Divide the resulting values by 2
df['mean_recovered'] /= 2
df['mean_confirmed'] /= 2
df['mean_death'] /= 2
print(df.head(20))
########################################################
# Assuming you have a DataFrame 'df' with 'Date' and columns 'n_confirmed', 'n_recovered', 'n_death'
df = pd.read_csv(r'C:\Users\kida_ev\PycharmProjects\pythonProject1\MA_EVNZR\German_case_.csv')
df_ = pd.read_csv(r'C:\Users\kida_ev\PycharmProjects\pythonProject1\MA_EVNZR\German_case_.csv')
#adding name date column
df = add_date_name_column(df)
df_=add_date_name_column(df_)
#print(df.head(35))
#'n_confirmed', 'n_recovered', 'n_death'
df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')


# reduce the data frame by two rows from the top of df
indices_to_remove = [1,2]
df = df.drop(indices_to_remove)
#---   df is dataframe that starts from monday; the first two rows were removed
#----- df_ is dataframe that starts from saturday..

df_numb_date = pd.Series(range(1, len(df_['Date']) + 1) ,name=df_['days'],df_['Date'].index)
#df_['days']=

############################################
#Plot the results
plt.plot(solution_seaifrd.t, solution_seaifrd.y[0], label='S')
plt.plot(solution_seaifrd.t, solution_seaifrd.y[1], label='E')
plt.plot(solution_seaifrd.t, solution_seaifrd.y[2], label='A')
plt.plot(solution_seaifrd.t, solution_seaifrd.y[3], label='I')
plt.plot(solution_seaifrd.t, solution_seaifrd.y[4], label='F')
plt.plot(solution_seaifrd.t, solution_seaifrd.y[5], label='R')
plt.plot(solution_seaifrd.t, solution_seaifrd.y[6], label='D')
plt.scatter(df_observed['days'], df_observed['confirmed'], color='red', label='Observed Confirmed', marker='.')
plt.scatter(df_observed['days'], df_observed['recovered'], color='green', label='Observed Recovered', marker='.')
plt.scatter(df_observed['days'], df_observed['death'], color='black', label='Observed Death', marker='.')
plt.xlabel('Days')
plt.ylabel('Population')
plt.title('SEAIRFD Model with Observed Data and Estimated Parameters')
plt.legend()
plt.show()
